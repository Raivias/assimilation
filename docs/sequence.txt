@startuml
participant assimilation
participant map
participant players as pl
participant listeners
participant join
participant move
participant updatestate
collections agents
collections observers

== Initialize ==
[-> assimilation
assimilation -> pl : make list
assimilation ->> join : open port
create map
assimilation -> map : create initial state

== player joins ==
agents -> join : add to game
activate join
join -> pl : add player to list
activate pl
pl --> join : added
deactivate pl
join --> agents : ACK
deactivate join

== observer joins ==
observers -> join : add to game
activate join
join -> listeners : add listener to list
activate listeners
listeners --> join : added
deactivate listeners
join --> observers : ACK
deactivate join

== game play ==
loop
  assimilation -> pl : get players
  activate assimilation
  activate pl
  pl --> assimilation
  deactivate pl

  assimilation -> map : add new players
  activate map
  map --> assimilation : new map state
  deactivate map

  assimilation -> map : get next state
  activate map
  map -> pl : get move
  activate pl
  create move
  pl -> move : Get player moves
  activate move
  move -> agents : GET move
  activate agents
  agents --> move : return move
  deactivate agents
  move -> move : collect all moves
  move -> pl : return moves
  destroy move
  pl --> map : player moves
  deactivate pl
  map --> assimilation : new state
  deactivate map

  assimilation -> assimilation : apply additional logic (end game)
  assimilation -> map : save new state as map

  assimilation -> listeners : update with new state
  activate listeners
  create updatestate
  listeners -> updatestate : send update
  activate updatestate
  updatestate ->> observers : send update
  updatestate --> listeners : sent
  destroy updatestate
  listeners --> assimilation
  deactivate listeners
  deactivate assimilation
end


@enduml
